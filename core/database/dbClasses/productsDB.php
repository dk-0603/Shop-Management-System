<?php

class ProductDB
{

    private $pdo;

    public function __construct($pdo)
    {
        $this->pdo = $pdo;
    }

    // Add a new product along with images
    public function addProductWithImages(Product $product)
    {
        // Start a transaction to ensure data consistency
        $this->pdo->beginTransaction();

        try {
            // Insert product information into the products table
            $queryProduct = "INSERT INTO products (product_name, brand, category, userid, size, color, price, quantity_in_stock, supplier, date_added) 
                             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            $paramsProduct = [
                $product->getName(),
                $product->getBrand(),
                $product->getCategory(),
                $product->getUser(),
                $product->getSize(),
                $product->getColor(),
                $product->getPrice(),
                $product->getQuantityInStock(),
                $product->getSupplier(),
                $product->getDateAdded()
            ];

            $stmtProduct = $this->pdo->prepare($queryProduct);
            $stmtProduct->execute($paramsProduct);

            // Get the product ID generated by the database
            $productId = $this->pdo->lastInsertId();

            // Insert image paths into the images table
            $queryImages = "INSERT INTO images (image_path) VALUES (?)";
            $stmtImages = $this->pdo->prepare($queryImages);

            foreach ($product->getImages() as $imagePath) {
                $stmtImages->execute([$imagePath]);

                // Get the image ID generated by the database
                $imageId = $this->pdo->lastInsertId();

                // Link the product and image in the product_images table
                $queryProductImages = "INSERT INTO product_images (product_id, image_id) VALUES (?, ?)";
                $stmtProductImages = $this->pdo->prepare($queryProductImages);
                $stmtProductImages->execute([$productId, $imageId]);
            }

            // Commit the transaction if everything is successful
            $this->pdo->commit();

            return true;
        } catch (Exception $e) {
            // Rollback the transaction if an error occurs
            $this->pdo->rollBack();
            // Log or handle the error appropriately
            return false;
        }
    }


    public function getAllProducts()
    {
        $query = "SELECT p.*, i.image_path,u.email
                  FROM Products p
                  LEFT JOIN product_images pi ON p.product_id = pi.product_id
                  LEFT JOIN images i ON pi.image_id = i.image_id
                  left join users u on u.id=p.userid"
                  ;

        $result = $this->pdo->query($query);
        $products = [];

        while ($row = $result->fetch(PDO::FETCH_ASSOC)) {
            $productId = $row['product_id'];

            // Check if the product is already in the array
            if (!isset($products[$productId])) {
                // Create a new Product object for the product
                $product = new Product(
                    $row['product_id'],
                    $row['product_name'],
                    $row['brand'],
                    $row['category'],
                    $row['email'],
                    $row['size'],
                    $row['color'],
                    $row['price'],
                    $row['quantity_in_stock'],
                    $row['supplier'],
                    $row['date_added'],
                    new Images()  // Create a new Images object for each product
                );

                // Add the product to the array
                $products[$productId] = $product;
            }

            // Add the image path to the product's images array
            $products[$productId]->getImages[] = $row['image_path'];
        }

        return array_values($products);  // Convert associative array to indexed array
    }

    public function getProductById($productId)
    {
        try {
            // Fetch associated image paths for the product using Images class
            $query = "SELECT DISTINCT image_path FROM Products p
                  LEFT JOIN product_images pi ON p.product_id = pi.product_id
                  LEFT JOIN images i ON pi.image_id = i.image_id
                  WHERE p.product_id = :product_id";

            $stmt = $this->pdo->prepare($query);
            $stmt->bindParam(':product_id', $productId, PDO::PARAM_INT);
            $stmt->execute();

            $imagePaths = $stmt->fetchAll(PDO::FETCH_COLUMN);

            if ($imagePaths === false) {
                throw new Exception("Error fetching associated image paths for product.");
            }

            // Fetch product details
            $queryProduct = "SELECT * FROM Products WHERE product_id = :product_id";
            $stmtProduct = $this->pdo->prepare($queryProduct);
            $stmtProduct->bindParam(':product_id', $productId, PDO::PARAM_INT);
            $stmtProduct->execute();

            $productRow = $stmtProduct->fetch(PDO::FETCH_ASSOC);

            if (!$productRow) {
                return null; // Product not found
            }

            // Create and return a Product object
            $images = new Images(); 
            foreach ($imagePaths as $imagePath) {
                $images->addImagePath($imagePath);
            }

            return new Product(
                $productRow['product_id'],
                $productRow['product_name'],
                $productRow['brand'],
                $productRow['category'],
                $productRow['userid'],
                $productRow['size'],
                $productRow['color'],
                $productRow['price'],
                $productRow['quantity_in_stock'],
                $productRow['supplier'],
                $productRow['date_added'],
                $images
            );
        } catch (Exception $e) {
            // Handle the exception, log it, or rethrow as needed
            throw $e;
        }
    }



    public function deleteProduct($productId)
    {

        try {
            $this->pdo->beginTransaction();

            // Fetch associated image paths for the product using Images class
            $query = "SELECT DISTINCT image_path FROM Products p
                      LEFT JOIN product_images pi ON p.product_id = pi.product_id
                      LEFT JOIN images i ON pi.image_id = i.image_id
                      WHERE p.product_id = :product_id";

            $stmt = $this->pdo->prepare($query);
            $stmt->bindParam(':product_id', $productId, PDO::PARAM_INT);
            $stmt->execute();

            $imagePaths = $stmt->fetchAll(PDO::FETCH_COLUMN);

            // Delete product from the Products table
            $stmtProduct = $this->pdo->prepare("DELETE FROM Products WHERE product_id = :product_id");
            $stmtProduct->bindParam(':product_id', $productId, PDO::PARAM_INT);
            $productDeleted = $stmtProduct->execute();

            $imageDeleted = false;
            // Delete associated images from the Images table
            foreach ($imagePaths as $imagePath) {
                $stmtImage = $this->pdo->prepare("DELETE FROM Images WHERE image_path = :image_path");
                $stmtImage->bindParam(':image_path', $imagePath, PDO::PARAM_STR);
                $imageDeleted = $stmtImage->execute();
            }

            // Delete associated image files from the file system
            $this->deleteProductImages($imagePaths);

            $this->pdo->commit();

            return $productDeleted && $imageDeleted;
        } catch (Exception $e) {
            $this->pdo->rollBack();
            throw $e;
        }
    }

    // Updated method to delete associated images from the file system
    private function deleteProductImages($imagePaths)
    {
        foreach ($imagePaths as $imagePath) {
            // Assuming a function like unlink to delete the file
            if (file_exists($imagePath)) {
                unlink($imagePath);
            }
        }
    }







}
